pragma circom 2.1.8;

function get_A(n, k) {
    assert(n == 64 && k == 6);
    var ret[6];

    ret[0] = 143525600065845;
    ret[1] = 114598615016782598386824;
    ret[2] = 114598615266301018706978;
    ret[3] = 114598615266301018707477;
    ret[4] = 114598615266301018707477;
    ret[5] = 114598615266301018707477;    
    return ret;
}

function get_B(n, k) {
    assert(n == 64 && k == 6);
    var ret[6];

    ret[0] = 910251111600096629027;
    ret[1] = 96077020673894528936038;
    ret[2] = 113805473541170957534560;
    ret[3] = 96865119522795836376105;
    ret[4] = 75558116002570094211894;
    ret[5] = 21055812221814414332681;    
    return ret;
}

function get_p384_prime(n, k) {
    assert(n == 64 && k == 6);
    var ret[6];

    ret[0] = 285960729237;
    ret[1] = 114598615265601123795744;
    ret[2] = 114598615266301018707476;
    ret[3] = 114598615266301018707477;
    ret[4] = 114598615266301018707477;
    ret[5] = 114598615266301018707477;    
    return ret;
}

function get_p384_order(n, k) {
    assert(n == 64 && k == 6);
    var ret[6];

    ret[0] = 108745882462454259156821;
    ret[1] = 29302941587567250839906;
    ret[2] = 95451817661142119551089;
    ret[3] = 114598615266301018707477;
    ret[4] = 114598615266301018707477;
    ret[5] = 114598615266301018707477;    
    return ret;
}

function get_p384_params() {
    var A[6] = get_A(64, 6);
    var B[6] = get_B(64, 6);
    var P[6] = get_p384_prime(64, 6);
    var N[6] = get_p384_order(64, 6);

    return [A,B,P,N];
}